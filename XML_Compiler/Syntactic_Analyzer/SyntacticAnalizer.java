
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 21 20:51:29 CST 2016
//----------------------------------------------------

package ARM;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 21 20:51:29 CST 2016
  */
public class SyntacticAnalizer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticAnalizer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalizer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalizer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\010\000\002\003\010\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\010\000\002\003\010\000\002\003\010\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\010\000\002\003" +
    "\010\000\002\003\010\000\002\003\010\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\012\000\002\003\012\000\002\003\012\000\002\003\012" +
    "\000\002\003\012\000\002\003\012\000\002\003\012\000" +
    "\002\003\012\000\002\003\012\000\002\003\012\000\002" +
    "\003\012\000\002\003\012\000\002\003\012\000\002\003" +
    "\012\000\002\003\012\000\002\003\012\000\002\003\012" +
    "\000\002\003\012\000\002\003\012\000\002\003\012\000" +
    "\002\003\012\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\122\004\021\005\024\006\054\007\042\010" +
    "\033\011\034\012\007\013\041\014\015\015\016\016\013" +
    "\017\026\020\023\021\031\022\044\023\047\024\046\025" +
    "\012\026\032\027\035\030\006\031\010\032\051\033\050" +
    "\034\020\035\030\036\045\037\040\040\017\041\055\042" +
    "\011\043\037\044\053\045\005\046\025\047\036\050\014" +
    "\051\043\055\052\063\022\001\002\000\004\002\374\001" +
    "\002\000\004\055\373\001\002\000\004\052\057\001\002" +
    "\000\004\052\057\001\002\000\004\052\057\001\002\000" +
    "\004\055\325\001\002\000\004\052\057\001\002\000\004" +
    "\052\057\001\002\000\004\055\306\001\002\000\004\052" +
    "\057\001\002\000\004\052\057\001\002\000\004\055\273" +
    "\001\002\000\004\055\272\001\002\000\004\052\057\001" +
    "\002\000\124\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\055\uffa8\063\uffa8\001\002\000\004\052\057" +
    "\001\002\000\004\052\057\001\002\000\004\055\245\001" +
    "\002\000\006\052\057\056\235\001\002\000\124\002\uffff" +
    "\004\021\005\024\006\054\007\042\010\033\011\034\012" +
    "\007\013\041\014\015\015\016\016\013\017\026\020\023" +
    "\021\031\022\044\023\047\024\046\025\012\026\032\027" +
    "\035\030\006\031\010\032\051\033\050\034\020\035\030" +
    "\036\045\037\040\040\017\041\055\042\011\043\037\044" +
    "\053\045\005\046\025\047\036\050\014\051\043\055\052" +
    "\063\022\001\002\000\004\055\233\001\002\000\004\052" +
    "\057\001\002\000\004\052\057\001\002\000\004\052\057" +
    "\001\002\000\004\052\057\001\002\000\004\052\057\001" +
    "\002\000\004\055\172\001\002\000\004\055\171\001\002" +
    "\000\004\055\170\001\002\000\004\052\057\001\002\000" +
    "\004\052\057\001\002\000\004\055\151\001\002\000\004" +
    "\052\057\001\002\000\004\055\142\001\002\000\004\052" +
    "\057\001\002\000\004\052\057\001\002\000\004\052\057" +
    "\001\002\000\004\052\057\001\002\000\124\002\uffa7\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\055\uffa7\063" +
    "\uffa7\001\002\000\004\055\067\001\002\000\004\052\057" +
    "\001\002\000\004\055\056\001\002\000\124\002\uffb1\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\055\uffb1\063" +
    "\uffb1\001\002\000\130\002\uffa6\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\051\uffa6\055\uffa6\060\uffa6\062\uffa6\063\uffa6" +
    "\001\002\000\004\060\061\001\002\000\004\052\057\001" +
    "\002\000\004\060\063\001\002\000\010\052\057\053\064" +
    "\054\065\001\002\000\124\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\055\ufff6\063\ufff6\001\002\000" +
    "\124\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\055\ufff7\063\ufff7\001\002\000\124\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\055\ufff8\063\ufff8" +
    "\001\002\000\124\002\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\055\uffae\063\uffae\001\002\000\004\060" +
    "\071\001\002\000\004\061\072\001\002\000\004\052\057" +
    "\001\002\000\006\060\074\062\075\001\002\000\010\052" +
    "\057\053\101\054\102\001\002\000\004\060\076\001\002" +
    "\000\006\053\077\054\100\001\002\000\124\002\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe\063" +
    "\uffbe\001\002\000\124\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\055\uffbd\063\uffbd\001\002\000\004" +
    "\062\106\001\002\000\004\062\105\001\002\000\004\062" +
    "\104\001\002\000\124\002\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\055\uffbc\063\uffbc\001\002\000\124" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\055\uffbf\063\uffbf\001\002\000\124\002\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\055\uffc0\063\uffc0\001" +
    "\002\000\004\060\110\001\002\000\004\061\111\001\002" +
    "\000\004\052\057\001\002\000\006\060\114\062\113\001" +
    "\002\000\004\060\123\001\002\000\010\052\057\053\115" +
    "\054\116\001\002\000\004\062\122\001\002\000\004\062" +
    "\121\001\002\000\004\062\120\001\002\000\124\002\uffb7" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\055\uffb7" +
    "\063\uffb7\001\002\000\124\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\055\uffba\063\uffba\001\002\000" +
    "\124\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\055\uffbb\063\uffbb\001\002\000\006\053\124\054\125" +
    "\001\002\000\124\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\055\uffb9\063\uffb9\001\002\000\124\002" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\055" +
    "\uffb8\063\uffb8\001\002\000\004\060\127\001\002\000\004" +
    "\052\057\001\002\000\004\060\131\001\002\000\006\052" +
    "\057\053\132\001\002\000\124\002\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\055\uffd2\063\uffd2\001\002" +
    "\000\124\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\055\uffd3\063\uffd3\001\002\000\004\060\135\001" +
    "\002\000\004\052\057\001\002\000\004\060\137\001\002" +
    "\000\006\052\057\053\140\001\002\000\124\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\055\uffd0\063" +
    "\uffd0\001\002\000\124\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\055\uffd1\063\uffd1\001\002\000\124" +
    "\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\055\uffb4\063\uffb4\001\002\000\004\060\144\001\002\000" +
    "\004\052\057\001\002\000\004\060\146\001\002\000\006" +
    "\052\057\053\147\001\002\000\124\002\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\055\uffd4\063\uffd4\001" +
    "\002\000\124\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\055\uffd5\063\uffd5\001\002\000\124\002\uffa9" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\055\uffa9" +
    "\063\uffa9\001\002\000\004\060\153\001\002\000\004\052" +
    "\057\001\002\000\004\060\155\001\002\000\010\052\057" +
    "\053\156\054\157\001\002\000\124\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\055\ufff4\063\ufff4\001" +
    "\002\000\124\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\055\ufff3\063\ufff3\001\002\000\124\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\055\ufff5" +
    "\063\ufff5\001\002\000\004\060\162\001\002\000\004\052" +
    "\057\001\002\000\004\060\164\001\002\000\010\052\057" +
    "\053\165\054\166\001\002\000\124\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\055\uffe8\063\uffe8\001" +
    "\002\000\124\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\055\uffe7\063\uffe7\001\002\000\124\002\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\055\uffe9" +
    "\063\uffe9\001\002\000\124\002\uffb3\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\055\uffb3\063\uffb3\001\002\000" +
    "\124\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\055\uffaf\063\uffaf\001\002\000\124\002\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\055\uffab\063\uffab" +
    "\001\002\000\004\060\174\001\002\000\004\052\057\001" +
    "\002\000\004\060\176\001\002\000\004\052\057\001\002" +
    "\000\004\060\200\001\002\000\004\052\057\001\002\000" +
    "\124\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\055\uffcb\063\uffcb\001\002\000\004\060\203\001\002" +
    "\000\004\052\057\001\002\000\004\060\205\001\002\000" +
    "\010\052\057\053\206\054\207\001\002\000\124\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\055\uffee" +
    "\063\uffee\001\002\000\124\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\055\uffed\063\uffed\001\002\000" +
    "\124\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\055\uffef\063\uffef\001\002\000\004\060\212\001\002" +
    "\000\004\052\057\001\002\000\004\060\214\001\002\000" +
    "\010\052\057\053\215\054\216\001\002\000\124\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\055\ufff1" +
    "\063\ufff1\001\002\000\124\002\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\055\ufff0\063\ufff0\001\002\000" +
    "\124\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\055\ufff2\063\ufff2\001\002\000\004\060\221\001\002" +
    "\000\004\052\057\001\002\000\004\060\223\001\002\000" +
    "\004\052\057\001\002\000\124\002\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\055\uffcc\063\uffcc\001\002" +
    "\000\004\060\226\001\002\000\004\052\057\001\002\000" +
    "\004\060\230\001\002\000\006\052\057\053\231\001\002" +
    "\000\124\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\055\uffd6\063\uffd6\001\002\000\124\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\055\uffd7\063" +
    "\uffd7\001\002\000\124\002\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\055\uffb5\063\uffb5\001\002\000\004" +
    "\002\000\001\002\000\004\060\243\001\002\000\004\060" +
    "\237\001\002\000\010\052\057\053\240\054\241\001\002" +
    "\000\124\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\055\uffdb\063\uffdb\001\002\000\124\002\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\055\uffda\063" +
    "\uffda\001\002\000\124\002\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\055\uffdd\063\uffdd\001\002\000\004" +
    "\057\244\001\002\000\124\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\055\uffdc\063\uffdc\001\002\000" +
    "\124\002\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\055\uffac\063\uffac\001\002\000\004\060\247\001\002" +
    "\000\004\052\057\001\002\000\004\060\251\001\002\000" +
    "\010\052\057\053\252\054\253\001\002\000\124\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\055\ufffa" +
    "\063\ufffa\001\002\000\124\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\055\ufff9\063\ufff9\001\002\000" +
    "\124\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\055\ufffb\063\ufffb\001\002\000\004\060\256\001\002" +
    "\000\004\052\057\001\002\000\004\060\260\001\002\000" +
    "\006\052\057\053\261\001\002\000\124\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\055\uffd8\063\uffd8" +
    "\001\002\000\124\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\055\uffd9\063\uffd9\001\002\000\004\060" +
    "\264\001\002\000\004\052\057\001\002\000\004\060\266" +
    "\001\002\000\010\052\057\053\267\054\270\001\002\000" +
    "\124\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\055\ufffd\063\ufffd\001\002\000\124\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\055\ufffc\063\ufffc" +
    "\001\002\000\124\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\055\ufffe\063\ufffe\001\002\000\124\002" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\055" +
    "\uffb6\063\uffb6\001\002\000\124\002\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\055\uffb2\063\uffb2\001\002" +
    "\000\004\060\275\001\002\000\010\052\057\053\276\054" +
    "\277\001\002\000\124\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\055\uffe2\063\uffe2\001\002\000\124" +
    "\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\055\uffe1\063\uffe1\001\002\000\124\002\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\055\uffe3\063\uffe3\001" +
    "\002\000\004\060\302\001\002\000\010\052\057\053\303" +
    "\054\304\001\002\000\124\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\055\uffe5\063\uffe5\001\002\000" +
    "\124\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\055\uffe4\063\uffe4\001\002\000\124\002\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\055\uffe6\063\uffe6" +
    "\001\002\000\124\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\055\uffaa\063\uffaa\001\002\000\004\060" +
    "\310\001\002\000\004\052\057\001\002\000\004\060\312" +
    "\001\002\000\010\052\057\053\313\054\314\001\002\000" +
    "\124\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\055\uffdf\063\uffdf\001\002\000\124\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\055\uffde\063\uffde" +
    "\001\002\000\124\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\055\uffe0\063\uffe0\001\002\000\004\060" +
    "\317\001\002\000\004\052\057\001\002\000\004\060\321" +
    "\001\002\000\010\052\057\053\322\054\323\001\002\000" +
    "\124\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\055\uffce\063\uffce\001\002\000\124\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\055\uffcd\063\uffcd" +
    "\001\002\000\124\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\055\uffcf\063\uffcf\001\002\000\124\002" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\055" +
    "\uffb0\063\uffb0\001\002\000\004\060\327\001\002\000\004" +
    "\061\330\001\002\000\004\052\057\001\002\000\006\060" +
    "\333\062\332\001\002\000\004\060\342\001\002\000\010" +
    "\052\057\053\334\054\335\001\002\000\004\062\341\001" +
    "\002\000\004\062\340\001\002\000\004\062\337\001\002" +
    "\000\124\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\055\uffc1\063\uffc1\001\002\000\124\002\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\055\uffc4\063" +
    "\uffc4\001\002\000\124\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\055\uffc5\063\uffc5\001\002\000\006" +
    "\053\343\054\344\001\002\000\124\002\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\055\uffc3\063\uffc3\001" +
    "\002\000\124\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\055\uffc2\063\uffc2\001\002\000\004\060\346" +
    "\001\002\000\004\052\057\001\002\000\004\060\350\001" +
    "\002\000\010\052\057\053\351\054\352\001\002\000\124" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\055\uffeb\063\uffeb\001\002\000\124\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\050\uffea\051\uffea\055\uffea\063\uffea\001" +
    "\002\000\124\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\055\uffec\063\uffec\001\002\000\004\060\355" +
    "\001\002\000\004\061\356\001\002\000\004\052\057\001" +
    "\002\000\006\060\361\062\360\001\002\000\004\060\370" +
    "\001\002\000\010\052\057\053\362\054\363\001\002\000" +
    "\004\062\367\001\002\000\004\062\366\001\002\000\004" +
    "\062\365\001\002\000\124\002\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\055\uffc6\063\uffc6\001\002\000" +
    "\124\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\055\uffc9\063\uffc9\001\002\000\124\002\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\055\uffca\063\uffca" +
    "\001\002\000\006\053\371\054\372\001\002\000\124\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\055" +
    "\uffc8\063\uffc8\001\002\000\124\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\055\uffc7\063\uffc7\001\002" +
    "\000\124\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\055\uffad\063\uffad\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\002\003\003\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\353\001\001\000\004" +
    "\004\344\001\001\000\004\004\325\001\001\000\002\001" +
    "\001\000\004\004\315\001\001\000\004\004\306\001\001" +
    "\000\002\001\001\000\004\004\300\001\001\000\004\004" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\262\001\001\000\002\001\001\000\004\004\254\001" +
    "\001\000\004\004\245\001\001\000\002\001\001\000\004" +
    "\004\235\001\001\000\006\002\233\003\026\001\001\000" +
    "\002\001\001\000\004\004\224\001\001\000\004\004\217" +
    "\001\001\000\004\004\210\001\001\000\004\004\201\001" +
    "\001\000\004\004\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\160\001\001\000" +
    "\004\004\151\001\001\000\002\001\001\000\004\004\142" +
    "\001\001\000\002\001\001\000\004\004\133\001\001\000" +
    "\004\004\125\001\001\000\004\004\106\001\001\000\004" +
    "\004\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\061\001" +
    "\001\000\002\001\001\000\004\004\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\072" +
    "\001\001\000\002\001\001\000\004\004\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\127\001\001\000\002\001\001" +
    "\000\004\004\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\135\001\001\000\002" +
    "\001\001\000\004\004\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\144\001\001\000\002\001\001\000\004\004\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\153\001\001\000\002\001" +
    "\001\000\004\004\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\162\001\001\000\002\001\001\000\004\004\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\174\001\001\000\002\001\001\000" +
    "\004\004\176\001\001\000\002\001\001\000\004\004\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\203\001\001\000\002\001\001\000\004\004\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\212\001\001\000\002\001\001" +
    "\000\004\004\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\221" +
    "\001\001\000\002\001\001\000\004\004\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\226\001\001" +
    "\000\002\001\001\000\004\004\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\247\001\001\000\002\001\001" +
    "\000\004\004\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\256" +
    "\001\001\000\002\001\001\000\004\004\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\264\001\001\000\002\001\001\000\004\004\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\310\001" +
    "\001\000\002\001\001\000\004\004\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\317\001\001\000\002\001\001\000\004" +
    "\004\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\346\001\001\000\002\001\001\000\004\004\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalizer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalizer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalizer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Method that is called automatically before a syntactic error.
     **/ 
    public void syntax_error(Symbol s){
        String error = "Syntax Error on Line " + (s.left) +
        " Column "+s.right+ ". This component is not expected: " + s.value + "\n";
        CodeGeneration.errorList.add(error);
        CodeGeneration.syntacticError = 1;
    }

    /**
     * Method that is called automatically before a syntactic error 
     * where it is no longer possible error recovery.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticAnalizer$actions {



//Declare variable containing the start of the memory address for instructions
   static int instruction_direction = 0;

//Write in the output file
private static void writeOutputFile(String hexCode) throws IOException{
    String path = "out.txt";
    File outputFile = new File(path);
    BufferedWriter writeInstruction=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile,true), "utf-8"));  
    writeInstruction.write(hexCode);
    //Cierra el flujo de escritura  
    writeInstruction.close(); 
            
    }

//Function that writes that converts the instruction into hexadecimal and writes in the file
private static void generateHexInstruction(String binaryCode) throws IOException{
    if(CodeGeneration.lexicalError == 0 && CodeGeneration.syntacticError == 0 &&
        CodeGeneration.semanticError == 0){
        
        String hexCode = "0x" + Long.toHexString(Long.parseLong(binaryCode,2)) + "\r\n";
        String hexInstruction = Integer.toBinaryString(instruction_direction + 0b10000000000000000000000000000000).substring(1);
        hexInstruction = "0x" + Long.toHexString(Long.parseLong(hexInstruction,2)) + "\t\t";
        writeOutputFile(hexInstruction);
        writeOutputFile(hexCode);
        instruction_direction = instruction_direction + 4;
    }
}
  
 //Esta instruccion genera el codigo para las instrucciones B y BL
 private static String generateCodeBranchInstructions(String cond, String funct, Object label) throws IOException{
    String labelName = label.toString();
    int labelDirection = findDirection(labelName);
    int pc_plus_8 = instruction_direction + 8;
    int branch_target_address = labelDirection - pc_plus_8;
    int immediate = branch_target_address/4;

    if(CodeGeneration.labelExist == 0){
        CodeGeneration.semanticError = 1;
        CodeGeneration.errorList.add("Label Error: The label " + labelName + " don't exist.");
    }

  //Convierte los registros a su valor en binario(24 bits)
    String imm24 = (Integer.toBinaryString(immediate).length() == 32) ? Integer.toBinaryString(immediate).substring(8,32) : Integer.toBinaryString(immediate + 0b1000000000000000000000000).substring(1);

  //Convierte la instrucción a hexadecimal
    String hexCode = cond + "10" + funct + imm24;
    generateHexInstruction(hexCode);
    return hexCode;
 }

//Esta funcion se encarga de ir a buscar la direccion de la etiqueta
private static int findDirection(String labelName){
    int large = CodeGeneration.labelList.size();
    int direction = 0;
    CodeGeneration.labelExist = 0;
    for(int i = 0; i < large; i++){
        String findLabel = CodeGeneration.labelList.get(i).getName();
        if(findLabel.equals(labelName)){
            direction = CodeGeneration.labelList.get(i).getDirection();
            CodeGeneration.labelExist = 1;
            break;
        }
    }
    return direction;
}

 /**
  * This function is responsible for generating the code for functions with 
  * register addressing(lsl R1,R2,R3), its for data-processing instrcutions
 **/
 private static String generateCodeAddressingRegisterOnly(String cond, String op, String i,
 String cmd, String s, Object Rn, Object Rd, String shamt5, String sh, Object Rm) throws IOException{
    
    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extracts the number of rd
    String rn = Rn.toString(); 
    rn = rn.substring(1,rn.length()); //extracts the number of rn
    String rm = Rm.toString();
    rm = rm.substring(1,rm.length()); //extracts the number of rm

    //Convert to integer each register to convert it to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);
    int sourcerm_register = Integer.parseInt(rm);

    //Converts each register number to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    String register_rm = Integer.toBinaryString(sourcerm_register + 0b10000).substring(1);


    //Converts the instruction to hexadecimal
    String hexCode = cond + op + i + cmd + s + register_rn + register_rd + shamt5 + sh + 0 + register_rm;
    generateHexInstruction(hexCode);
    return "The generated code is: " + cmd + i + cond + Rd + Rn + Rm;
 }


/**
  * This function is responsible for generating the code for functions with 
  * register-shifted register addressing(lsl R1,R2,R3), its for shifts
  * instructions
 **/
private static String generateCodeAddressingRegisterShiftedRegister(String cond, String op, String i,
 String cmd, String s, String Rn, Object Rd, Object Rs, String sh, Object Rm) throws IOException{
    
    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number of rd
    String rs = Rs.toString(); 
    rs = rs.substring(1,rs.length()); //extract the number of rs
    String rm = Rm.toString();
    rm = rm.substring(1,rm.length()); //extract the number of rm

    //Convert to integer each register to convert it to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcers_register = Integer.parseInt(rs);
    int sourcerm_register = Integer.parseInt(rm);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rs = Integer.toBinaryString(sourcers_register + 0b10000).substring(1);
    String register_rm = Integer.toBinaryString(sourcerm_register + 0b10000).substring(1);

    //Converts the instruction to hexadecimal
    String hexCode = cond + op + i + cmd + s + Rn + register_rd + register_rs + "0" + sh + "1" + register_rm;
    generateHexInstruction(hexCode);
    return "The generated code is: " + cmd + i + cond + Rd + Rn + Rm;
 }

/**
  * This function is responsible for generating the code for
  * multiplication instructions
 **/
private static String generateCodeMultiplicationInstr(String cond, String cmd, 
String s, Object Rd, Object Ra, Object Rm,  Object Rn) throws IOException{

    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number of rd
    String rm = Rm.toString(); 
    rm = rm.substring(1,rm.length()); //extract the number of rm
    String rn = Rn.toString();
    rn = rn.substring(1,rn.length()); //extract the number of rn
    String ra = Ra.toString();
    ra = ra.substring(1,ra.length()); //extract the number of ra

    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);
    int sourcerm_register = Integer.parseInt(rm);
    int sourcera_register = Integer.parseInt(ra);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    String register_rm = Integer.toBinaryString(sourcerm_register + 0b10000).substring(1);
    String register_ra = Integer.toBinaryString(sourcera_register + 0b10000).substring(1);

    //Converts the instruction to hexadecimal
    String hexCode = cond + "00" + "00" + cmd + s + register_rd + register_ra + register_rm + "1001" + register_rn;
    generateHexInstruction(hexCode);
    return "The generated code is: " + cmd  + cond + Rd + Rn + Rm;
 }

/**
  * This function is responsible for generating the code for
  * memory access instructions that use register offset LDR R1,[R2,R4]
 **/
private static String generateCodeMemoryRegisterOffset(String cond, 
String p, String u, String b ,String w, String l,
Object Rn, Object Rd, Object Rm) throws IOException{

    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number off rd
    String rn = Rn.toString();
    rn = rn.substring(1,rn.length()); //extract the number off rn
    String rm = Rm.toString();
    rm = rm.substring(1,rm.length()); //contains the number off rm

    //Variables that containst the number of the register(Check if it is correct)
   
    
    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);
    int sourcerm_register = Integer.parseInt(rm);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    String register_rm = Integer.toBinaryString(sourcerm_register + 0b10000).substring(1);
    

    //Decodes the instruction to hexadecimal
    String hexCode = cond + "01" + "1" + p + u + b + w + l + register_rn + register_rd + "00000" + "00" + "0" + register_rm;
    generateHexInstruction(hexCode);
    return "The generated code is: "  + cond + Rd + Rn ;
 }

/**
  * This function is responsible for generating the code for
  * memory access instructions that use hexadecimal immediate
 **/
private static String generateCodeMemoryInstrHexImmediate(String cond, String p, String w,
String b, String l, Object Rn, Object Rd, Object hex_immediate) throws IOException{

    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number off rd
    String rn = Rn.toString();
    rn = rn.substring(1,rn.length()); //extract the number off rn
    String immediate = hex_immediate.toString();
    immediate = immediate.substring(1,immediate.length()); //contains the imm
    
    //Variables that containst the large of the imm and the imm to binary
    int immediate_large= immediate.length(); //contains the large of the imm
    String immediate_register = ""; //contains the imm to binary equivalent

    if(immediate_large > 5){ //here is going to be an error
        CodeGeneration.semanticError = 1;
        CodeGeneration.errorList.add("Immediate Size Error: The size of the immediate is too large");
    }
    else if(immediate_large <= 5 ){
        int register_imm = Integer.decode(immediate);
        immediate_register = Integer.toBinaryString(register_imm+ 0b1000000000000).substring(1);
    }
    
    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    

    //Decodes the instruction to hexadecimal
    String hexCode = cond + "01" + "0" + p + "1" + b + w + l + register_rn + register_rd + immediate_register;
    generateHexInstruction(hexCode);
    return "The generated code is: "  + cond + Rd + Rn ;
 }


/**
  * This function is responsible for generating the code for
  * memory access instructions that use decimal immediate
 **/
private static String generateCodeMemoryInstrDecImmediate(String cond, String p ,String w,
String b, String l, Object Rn, Object Rd, Object decimal_immediate) throws IOException{
    
    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number off rd
    String rn = Rn.toString();
    rn = rn.substring(1,rn.length()); //extract the number off rn
    String immediate = decimal_immediate.toString();
    
    immediate = immediate.substring(1,immediate.length()); //have the imm
    String u = (immediate.charAt(0) == '-') ? "0" : "1"; 
    immediate = (immediate.charAt(0) == '-') ? immediate.substring(1,immediate.length()) : immediate; //Check the sub
    
    //Variables that containst the value of the imm and the imm to binary
    int immediate_value= Integer.parseInt(immediate); //have the imm value
    
    String immediate_register = ""; //contains the imm to binary

    if(immediate_value > 4095){ //If this happens occurs an error
        CodeGeneration.semanticError = 1;
        CodeGeneration.errorList.add("Immediate Size Error: The size of the immediate is too large");
    }
    
    else if((4096 > immediate_value) && (immediate_value >= 0) ){
        immediate_register = Integer.toBinaryString(immediate_value + 0b1000000000000).substring(1);
    }
    
    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    
    //Decodes the instruction to hexadecimal
    String hexCode = cond + "01" + "0" + p + u + b + w + l + register_rn + register_rd + immediate_register;
    generateHexInstruction(hexCode);
    return "The generated code is: "  + cond + Rd + Rn ;
 }

/**
  * This function is responsible for generating the code for
  * data-processing instructions that use decimal immediate
 **/
private static String generateCodeDataProcessingInstrDecImmediate(String cond, 
String cmd, Object Rn, Object Rd, Object decimal_immediate) throws IOException{

    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number of rd
    String rn = Rn.toString();
    rn = rn.substring(1,rn.length()); //extract the number of rn
    String immediate = decimal_immediate.toString();
    immediate = immediate.substring(1,immediate.length()); //have the imm
    
    //Change the cmd if the immediate is negative
    String final_cmd = (immediate.charAt(0) == '-' && cmd == "0000") ? "1110" : cmd; //pasa de and a bic
    final_cmd = (immediate.charAt(0) == '-' && cmd == "1110") ? "0000" : final_cmd; //pasa de bic a and
    final_cmd = (immediate.charAt(0) == '-' && cmd == "0100") ? "0010" : final_cmd; //pasa de add a sub
    final_cmd = (immediate.charAt(0) == '-' && cmd == "0010") ? "0100" : final_cmd; //pasa de sub a add
    final_cmd = (immediate.charAt(0) == '-' && cmd == "1010") ? "1011" : final_cmd; //pasa de cmp a cmn
    final_cmd = (immediate.charAt(0) == '-' && cmd == "1011") ? "1010" : final_cmd; //pasa de cmn a cmp
    final_cmd = (immediate.charAt(0) == '-' && cmd == "1101") ? "1111" : final_cmd; //pasa de mov a mvn

    //Assign the S value
    String s = (final_cmd == "1010" || final_cmd == "1011") ? "1" : "0";

    //Apply the complement to the negative immediate
    int complement_value = ~Integer.parseInt(immediate);
    

    /**
      * This variables contains the rot and imm parameters.
      * The variables that are need it to the rotation revision are initialized
     **/
    int immediate_value= (immediate.charAt(0) == '-' && ((cmd == "0000") || (cmd == "1101") || (cmd=="1110")))? 
                            complement_value: (immediate.charAt(0) == '-' && ((cmd == "0100") || (cmd == "0010") || (cmd=="1010")|| (cmd=="1011")))?
                            Integer.parseInt(immediate.substring(1,immediate.length())): Integer.parseInt(immediate); //large of imm
    String rotation=""; //contains the rotation value
    String immediate_8bits = immediate.substring(0,immediate.length()-1); //extract the imm
    String[] codification = new String[2];
    String immediate_register = "";

    if((immediate_value > 255) ){
        codification = getRotationImmediateValues(immediate_value); //calculate rotation and imm values
        if(codification[0] == "Error"){
           CodeGeneration.semanticError = 1;
           CodeGeneration.errorList.add("Immediate Codification Error: Rotated constant is too wide");
        }
        else{
           rotation = codification[1];
           immediate_register = codification[0];
        }
    }

    else if((256 > immediate_value) && (immediate_value > 0)){
        rotation = "0000";
        int register_imm = immediate_value;
        immediate_register = Integer.toBinaryString(register_imm + 0b100000000).substring(1);
    }
    
    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    
    //Decodes the instruction to hexadecimal
    String hexCode = cond + "00" + "1" + final_cmd + s + register_rn + register_rd + rotation + immediate_register;
    generateHexInstruction(hexCode);
    return "The generated code is: " + cmd  + cond + Rd + Rn ;
 }


/**
  * This function is responsible for generating the code for
  * data-processing shifts instructions that use decimal immediate
 **/
private static String generateCodeShiftInstrDecImmediate(String cond, 
String cmd, Object Rd, Object shamt5, String sh, Object Rm) throws IOException{

    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number of rd
    String rm = Rm.toString();
    rm = rm.substring(1,rm.length()); //extract the number of rm
    String shamt = shamt5.toString();
    shamt = shamt.substring(1,shamt.length()); //contains the shamt
    
    //Initialize the variables that are going to be used in the code generation
    int shamt_value= Integer.parseInt(shamt); //contains the value of the shamt
    String shamt_register = "";

    shamt_register = Integer.toBinaryString(shamt_value + 0b100000).substring(1); //shamt of 5 bits
    
    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcerm_register = Integer.parseInt(rm);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rm = Integer.toBinaryString(sourcerm_register+ 0b10000).substring(1);
    
    //Decodes the instruction to hexadecimal
    String hexCode = cond + "00" + "0" + cmd + "0" + "0000" + register_rd + shamt_register + sh + "0" + register_rm;
    generateHexInstruction(hexCode);
    return "The generated code is: " + cmd  + cond + Rd + Rm ;
 }


/**
  * This function is responsible for generating the code for
  * data-processing instructions that use hexadecimal immediate
 **/
private static String generateCodeDataProcessingInstrHexImmediate(String cond, 
String cmd, Object Rn, Object Rd, Object hex_immediate) throws IOException{

    String rd = Rd.toString();
    rd = rd.substring(1,rd.length()); //extract the number of rd
    String rn = Rn.toString();
    rn = rn.substring(1,rn.length()); //extract the number of rn
    String immediate = hex_immediate.toString();
    immediate = immediate.substring(1,immediate.length()); //have the imm

    //Assign the S value
    String s = (cmd == "1010" || cmd == "1011") ? "1" : "0";
    
    /**
      * This variables contains the rot and imm parameters.
      * The variables that are need it to the rotation revision are initialized
     **/
    int immediate_large= immediate.length(); //have the large immediate
    String rotation=""; //have the rotation value
    String immediate_8bits = immediate.substring(0,immediate.length()-1); //extract the immediate
    String[] codification = new String[2];
    String immediate_register = "";

  //  if(immediate_large > 5){
  //      CodeGeneration.semanticError = 1;
  //      CodeGeneration.errorList.add("Immediate Size Error: The size of the immediate is too large");

   // }
    if(immediate_large >= 5 ){
        codification = getRotationImmediateValues(Integer.decode(immediate)); //calculate rotation and immediate values
        if(codification[0] == "Error"){
           CodeGeneration.semanticError = 1;
           CodeGeneration.errorList.add("Immediate Codification Error: Rotated constant is too wide");
        }
        else{
           rotation = codification[1];
           immediate_register = codification[0];
        }
    }

    else if(immediate_large <= 4){
        rotation = "0000";
        int register_imm = Integer.decode(immediate);
        immediate_register = Integer.toBinaryString(register_imm+ 0b100000000).substring(1);
    }
    
    //Convert to integer each register to his corresponding binary
    int destination_register = Integer.parseInt(rd);
    int sourcern_register = Integer.parseInt(rn);

    //Convert each register to his binary value(4 bits)
    String register_rd = Integer.toBinaryString(destination_register + 0b10000).substring(1);
    String register_rn = Integer.toBinaryString(sourcern_register + 0b10000).substring(1);
    
    //Decodes the instruction to hexadecimal
    String hexCode = cond + "00" + "1" + cmd + s + register_rn + register_rd + rotation + immediate_register;
    generateHexInstruction(hexCode);
    return "The generated code is: " + cmd  + cond + Rd + Rn ;
 }


//Function that performs the encoding of the immediate value and rotation value
public static String[] getRotationImmediateValues(int hex_value){
        //The array that returns the immediate and rotation is declared
        String[] codification = new String[2];
        codification[0] = "Error"; //if an imm dont match return an error

        //This variable contains the immediate extended with zeros to complete the 32-bit
        String immediate = String.format("%32s", Integer.toBinaryString(hex_value)).replace(" ", "0");

        /**
          * This variables contains the rot and imm parameters.
          * Also contains the variables for the loop 
          * The variables that are need it to the rotation revision are initialized
          **/
        String final_immediate = ""; //Contains the immediate encoded
        int i = 24; 
        int j = 0; 
        int k = 2;
        int rote_value = 0; //Contains the 4 bits rote_value
        int integer_immediate = 0;
        int immediate_rotated = 0; //Contains the immediate_rotated
        
        for(int n = 0; k <= 22; n++){
            if(i < 33){
                if(i == 24){
                    final_immediate = immediate.substring(i,32);
                    integer_immediate = Integer.parseInt(final_immediate,2);
                    immediate_rotated = Integer.rotateRight(integer_immediate, 2*rote_value);
                    if(immediate_rotated == hex_value){
                        codification[0] = final_immediate; //assigns the encoded immediate 
                        codification[1] = Integer.toBinaryString(rote_value); //assigns the encoded rotation    
                        break;
                    }
                    i = i+2;
                    rote_value = rote_value + 1;
                    
                }
                else{
                    final_immediate = immediate.substring(i,32) + immediate.substring(j,6-(31-i) + 1);
                    integer_immediate = Integer.parseInt(final_immediate,2);
                    immediate_rotated = Integer.rotateRight(integer_immediate, 2*rote_value);
                    if(immediate_rotated == hex_value){
                        codification[0] = final_immediate; //assigns the encoded immediate 
                        codification[1] = Integer.toBinaryString(rote_value); //assigns the encoded rotation 
                        break;
                    }
                    i = i+2;   
                    rote_value = rote_value + 1;
                }
            }
            else if(k < 24){
                final_immediate = immediate.substring(k,(k+8));
                integer_immediate = Integer.parseInt(final_immediate,2);
                immediate_rotated = Integer.rotateRight(integer_immediate, 2*rote_value);
                if(immediate_rotated == hex_value){
                    codification[0] = final_immediate; //assigns the encoded immediate
                    codification[1] = Integer.toBinaryString(rote_value); //assigns the encoded rotation 
                    break;
                }
                k = k+2;
                rote_value = rote_value + 1;
            }
        }
        return codification;
    }


  private final SyntacticAnalizer parser;

  /** Constructor */
  CUP$SyntacticAnalizer$actions(SyntacticAnalizer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalizer$do_action(
    int                        CUP$SyntacticAnalizer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalizer$parser,
    java.util.Stack            CUP$SyntacticAnalizer$stack,
    int                        CUP$SyntacticAnalizer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalizer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalizer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // register ::= REGISTER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		 RESULT=r; 
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("register",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruction ::= LABEL 
            {
              Object RESULT =null;

              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // instruction ::= NEWINSTRUCTION 
            {
              Object RESULT =null;

              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instruction ::= BLLE LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1101", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instruction ::= BLGT LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1100", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // instruction ::= BLLT LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1011", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // instruction ::= BLGE LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1010", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // instruction ::= BLNE LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("0001", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruction ::= BLEQ LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("0000", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instruction ::= BL LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1110", "11", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruction ::= BNE LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("0001", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instruction ::= BEQ LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("0000", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instruction ::= BGT LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1100", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruction ::= BLT LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1011", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruction ::= BLE LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1101", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruction ::= BGE LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1010", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruction ::= B LABEL 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeBranchInstructions("1110", "10", e1);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruction ::= LDRB register COMA CORCHETEIZQUIERDO register COMA register CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT = generateCodeMemoryRegisterOffset("1110", "1", "1", "1" ,"0", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruction ::= LDRB register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","1", "0", "1", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruction ::= LDRB register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","0", "0", "1", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruction ::= LDRB register COMA CORCHETEIZQUIERDO register COMA HEXIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","1", "0", "1", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruction ::= LDRB register COMA CORCHETEIZQUIERDO register COMA DECIMALIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","1", "0", "1", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruction ::= STRB register COMA CORCHETEIZQUIERDO register COMA register CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT = generateCodeMemoryRegisterOffset("1110", "1", "1", "1" ,"0", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruction ::= STRB register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","0", "0", "1", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruction ::= STRB register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","0", "0", "1", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruction ::= STRB register COMA CORCHETEIZQUIERDO register COMA HEXIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","1", "0", "1", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruction ::= STRB register COMA CORCHETEIZQUIERDO register COMA DECIMALIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","1", "0", "1", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruction ::= LDR register COMA CORCHETEIZQUIERDO register COMA register CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT = generateCodeMemoryRegisterOffset("1110", "1", "1", "0" ,"0", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruction ::= LDR register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","0", "0", "0", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruction ::= LDR register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","0", "0", "0", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruction ::= LDR register COMA CORCHETEIZQUIERDO register COMA HEXIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","1", "0", "0", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruction ::= LDR register COMA CORCHETEIZQUIERDO register COMA DECIMALIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","1", "0", "0", "1", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruction ::= STR register COMA CORCHETEIZQUIERDO register COMA register CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT = generateCodeMemoryRegisterOffset("1110", "1", "1", "0" ,"0", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruction ::= STR register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","0", "0", "0", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruction ::= STR register COMA CORCHETEIZQUIERDO register CORCHETEDERECHO COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","0", "0", "0", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruction ::= STR register COMA CORCHETEIZQUIERDO register COMA HEXIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrHexImmediate("1110","1", "0", "0", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruction ::= STR register COMA CORCHETEIZQUIERDO register COMA DECIMALIMMEDIATE CORCHETEDERECHO 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT=generateCodeMemoryInstrDecImmediate("1110","1", "0", "0", "0", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruction ::= MLA register COMA register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r4 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMultiplicationInstr("1110", "001", "0", r1, r4, r3, r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruction ::= MUL register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeMultiplicationInstr("1110", "000", "0", r1, "0000", r3, r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruction ::= MVN register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "1111", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruction ::= MVN register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "1111", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruction ::= MVN register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1111","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruction ::= BIC register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "1110", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruction ::= BIC register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1110","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction ::= ROR register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "11", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction ::= ROR register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"11",r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= RRX register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "11", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= RRX register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"11",r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruction ::= ASR register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "10", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruction ::= ASR register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"10",r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruction ::= LSL register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "00", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruction ::= LSL register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"00",r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruction ::= MOV register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "1101", "0000", r1, r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruction ::= MOV register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "1101", "0000", r1, r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruction ::= MOV PC COMA LR 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1101","0","0000","R15","00000","00","R14");
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruction ::= MOV register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1101","0",r2,r1,"00000","00","0010");
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruction ::= ORR register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "1100", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruction ::= ORR register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "1100", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruction ::= ORR register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1100","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruction ::= CMN register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "1011", r1, "0000", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= CMN register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "1011", r1, "0000", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= CMN register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1011","1",r2,r1,"00000","00","0010");
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= CMP register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "1010", r1, "0000", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= CMP register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "1010", r1, "0000", r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= CMP register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","1010","1",r1,"0000","00000","00",r2);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= RSC register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0111", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= RSC register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0111", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= RSC register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0111","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= SBC register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0110", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= SBC register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0110", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= SBC register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0110","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= ADC register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0101", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= ADC register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0101", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= ADC register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0101","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= ADD register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0100", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= ADD register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0100", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= ADD register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0100","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= RSB register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0011", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= RSB register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0011", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= RSB register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0011","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= SUB register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0010", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= SUB register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0010", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= SUB register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0010","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= EOR register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0001", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= EOR register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0001", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= EOR register COMA register COMA register 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0001","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= AND register COMA register COMA HEXIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrHexImmediate("1110", "0000", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= AND register COMA register COMA DECIMALIMMEDIATE 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT= generateCodeDataProcessingInstrDecImmediate("1110", "0000", r2, r1, r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= AND register COMA register COMA register 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()).right;
		Object r3 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.peek()).value;
		RESULT=generateCodeAddressingRegisterOnly("1110","00","0","0000","0",r2,r1,"00000","00",r3);
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // assembly_code ::= instruction 
            {
              Object RESULT =null;

              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("assembly_code",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // assembly_code ::= instruction assembly_code 
            {
              Object RESULT =null;

              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("assembly_code",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalizer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= assembly_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalizer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.elementAt(CUP$SyntacticAnalizer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalizer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalizer$parser.done_parsing();
          return CUP$SyntacticAnalizer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

