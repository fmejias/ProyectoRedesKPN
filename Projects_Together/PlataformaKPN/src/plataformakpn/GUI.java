/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package plataformakpn;

import ComponentConnector.ConnectorContainer;
import ComponentConnector.DragLabel;
import ComponentConnector.JLabelConnector;
import KPN.KPNNetwork;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.border.EtchedBorder;
import static java.lang.Thread.sleep;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import xmlcompiler.CodeGenerator;

/**
 * This class contains all the graphical user interface definitions
 *
 * @author Daniel Canessa Valverde
 * @version 1.0
 */
public class GUI extends javax.swing.JFrame {

    /**
     * This variable is used to know that the user has activated the connections
     * mode
     */
    public static boolean creatingHardwareRelationsFlag;
    /**
     * This variable contains all the hardware abstractions that the user put
     * over the work field
     */
    public static HardwareGraph hardwareGraph;
    /**
     * This variable contains all the information applied over a queue process
     */
    public static HardwareModel selectedQueueJDialog;
    /**
     * This variable contains the last JLabel selected when
     * creatingHardwareRelationsFlag is true
     */
    public static JLabel lastSelectedHardware;
    /**
     * This variable is true when any change over the GUI is produced
     */
    public static boolean repaintWorkSpaceFlag;
    /**
     * This variable is used to know that the user has activated the connections
     * mode
     */
    public static boolean removingHardwareFlag;
    /**
     * This variable is used to store the border color of the JLabels when are
     * selected
     */
    public static Color selectedColor;
    /**
     * This variable contains the KPN network, is initialize using the variable
     * hardwareGraph as a parameter
     */
    private KPNNetwork net;
    /**
     * This variable contains all the JLabels of the View JDialog
     */
    public static List<JLabel> JLabelArrayView;
    /**
     * This variable contains all the JTextField of the View JDialog
     */
    public static List<JTextField> JTextFieldArrayView;
    /**
     * This variable contains the thread who refresh and redraw the GUI
     */
    private GUIActions GUIActions;
    /**
     * This variable is used to control if the KPN is going to work infinetely
     * or is going to work step by step
     */
    public volatile static boolean userThreadDebuging;

    /**
     * Constructor method of the class
     */
    public GUI() {
        initComponents();
        modifyGUI();
        initValues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogView = new javax.swing.JDialog();
        jPanelDialog1 = new javax.swing.JPanel();
        jTextFieldInput2 = new javax.swing.JTextField();
        jLabelInput2 = new javax.swing.JLabel();
        jLabelInput1 = new javax.swing.JLabel();
        jLabelOutput = new javax.swing.JLabel();
        jTextFieldInput1 = new javax.swing.JTextField();
        jLabelFIFO6 = new javax.swing.JLabel();
        jLabelOutput1 = new javax.swing.JLabel();
        jLabelOutput2 = new javax.swing.JLabel();
        jTextFieldOutput1 = new javax.swing.JTextField();
        jTextFieldOutput2 = new javax.swing.JTextField();
        jDialogDelay = new javax.swing.JDialog();
        jPanelDialog2 = new javax.swing.JPanel();
        jLabelDelay = new javax.swing.JLabel();
        jButtonApplyDelay = new javax.swing.JButton();
        jSpinnerDelay = new javax.swing.JSpinner();
        jLabelFIFO = new javax.swing.JLabel();
        jTextFieldFifo = new javax.swing.JTextField();
        jCheckBoxFifo = new javax.swing.JCheckBox();
        jPanel_Main = new javax.swing.JPanel();
        jButtonProductDragable = new javax.swing.JButton();
        jButtonAddDragable = new javax.swing.JButton();
        jButtonConstantGenerationDragable = new javax.swing.JButton();
        jButtonDuplicationDragable = new javax.swing.JButton();
        jButtonViewDragable = new javax.swing.JButton();
        jButtonSinkDragable = new javax.swing.JButton();
        jPanelBoard = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jButtonRelations = new javax.swing.JButton();
        jButtonTrash = new javax.swing.JButton();
        jButtonConstantGeneration = new javax.swing.JButton();
        jButtonDuplication = new javax.swing.JButton();
        jButtonSink = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButtonProduct = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneOutput = new javax.swing.JTextPane();
        jPanelJXTaskContainer = new javax.swing.JPanel();
        jXTaskPaneHardwareAbstraction = new org.jdesktop.swingx.JXTaskPane();
        jXTaskPaneActions = new org.jdesktop.swingx.JXTaskPane();
        jButtonView = new javax.swing.JButton();
        printKPN = new javax.swing.JButton();
        iterateKPN = new javax.swing.JButton();
        createKPN = new javax.swing.JButton();
        exportKPN = new javax.swing.JButton();

        jDialogView.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelDialog1.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDialog1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldInput2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInput2ActionPerformed(evt);
            }
        });
        jPanelDialog1.add(jTextFieldInput2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 127, -1));

        jLabelInput2.setText("Input2");
        jPanelDialog1.add(jLabelInput2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 40, 34));

        jLabelInput1.setText("Input1");
        jPanelDialog1.add(jLabelInput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 40, 34));

        jLabelOutput.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabelOutput.setText("Output FiFo:");
        jPanelDialog1.add(jLabelOutput, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, 132, 34));

        jTextFieldInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInput1ActionPerformed(evt);
            }
        });
        jPanelDialog1.add(jTextFieldInput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 127, -1));

        jLabelFIFO6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabelFIFO6.setText("Input FiFo:");
        jPanelDialog1.add(jLabelFIFO6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 132, 34));

        jLabelOutput1.setText("Output1");
        jPanelDialog1.add(jLabelOutput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 50, 34));

        jLabelOutput2.setText("Output2");
        jPanelDialog1.add(jLabelOutput2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 50, 34));

        jTextFieldOutput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutput1ActionPerformed(evt);
            }
        });
        jPanelDialog1.add(jTextFieldOutput1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 127, -1));

        jTextFieldOutput2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutput2ActionPerformed(evt);
            }
        });
        jPanelDialog1.add(jTextFieldOutput2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 60, 127, -1));

        jDialogView.getContentPane().add(jPanelDialog1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 90));

        jPanelDialog2.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDialog2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelDelay.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabelDelay.setText("Delay iterations:");
        jPanelDialog2.add(jLabelDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 20));

        jButtonApplyDelay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/apply32x32.png"))); // NOI18N
        jButtonApplyDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApplyDelayActionPerformed(evt);
            }
        });
        jPanelDialog2.add(jButtonApplyDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 40, -1));
        jPanelDialog2.add(jSpinnerDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 40, -1));

        jLabelFIFO.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabelFIFO.setText("FIFO items:");
        jPanelDialog2.add(jLabelFIFO, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 82, 34));
        jPanelDialog2.add(jTextFieldFifo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 240, -1));

        jCheckBoxFifo.setText("Is Constant Generation");
        jCheckBoxFifo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxFifoStateChanged(evt);
            }
        });
        jPanelDialog2.add(jCheckBoxFifo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, -1, -1));

        javax.swing.GroupLayout jDialogDelayLayout = new javax.swing.GroupLayout(jDialogDelay.getContentPane());
        jDialogDelay.getContentPane().setLayout(jDialogDelayLayout);
        jDialogDelayLayout.setHorizontalGroup(
            jDialogDelayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDialog2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        );
        jDialogDelayLayout.setVerticalGroup(
            jDialogDelayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDialog2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KPN Platform");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/icon.png")));
        setMaximumSize(new java.awt.Dimension(1200, 790));
        setMinimumSize(new java.awt.Dimension(1200, 790));
        setPreferredSize(new java.awt.Dimension(1200, 790));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel_Main.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Main.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel_Main.setMaximumSize(new java.awt.Dimension(1200, 700));
        jPanel_Main.setMinimumSize(new java.awt.Dimension(1200, 700));
        jPanel_Main.setPreferredSize(new java.awt.Dimension(1200, 700));
        jPanel_Main.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonProductDragable.setBackground(new java.awt.Color(255, 255, 255));
        jButtonProductDragable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/product48x48.png"))); // NOI18N
        jPanel_Main.add(jButtonProductDragable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 380, 60, -1));

        jButtonAddDragable.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAddDragable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add48x48.png"))); // NOI18N
        jPanel_Main.add(jButtonAddDragable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 380, 66, -1));

        jButtonConstantGenerationDragable.setBackground(new java.awt.Color(255, 255, 255));
        jButtonConstantGenerationDragable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/constant48x48.png"))); // NOI18N
        jPanel_Main.add(jButtonConstantGenerationDragable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 450, 66, -1));

        jButtonDuplicationDragable.setBackground(new java.awt.Color(255, 255, 255));
        jButtonDuplicationDragable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/duplication48x48.png"))); // NOI18N
        jPanel_Main.add(jButtonDuplicationDragable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 450, 66, -1));

        jButtonViewDragable.setBackground(new java.awt.Color(255, 255, 255));
        jButtonViewDragable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/view48x48.png"))); // NOI18N
        jPanel_Main.add(jButtonViewDragable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 590, 70, -1));

        jButtonSinkDragable.setBackground(new java.awt.Color(255, 255, 255));
        jButtonSinkDragable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sink48x48.png"))); // NOI18N
        jPanel_Main.add(jButtonSinkDragable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 520, 70, -1));

        jPanelBoard.setBackground(new java.awt.Color(255, 255, 255));
        jPanelBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelBoard.setLayout(new java.awt.GridBagLayout());
        jPanel_Main.add(jPanelBoard, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 970, 450));

        jButtonAdd.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add48x48.png"))); // NOI18N
        jButtonAdd.setToolTipText("Insert Adder Abstraction");
        jButtonAdd.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jButtonAddMouseDragged(evt);
            }
        });
        jButtonAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonAddMouseReleased(evt);
            }
        });
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 290, 66, -1));

        jButtonRelations.setBackground(new java.awt.Color(255, 255, 255));
        jButtonRelations.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/union48x48.png"))); // NOI18N
        jButtonRelations.setToolTipText("Make relation");
        jButtonRelations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRelationsActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonRelations, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 220, 66, 64));

        jButtonTrash.setBackground(new java.awt.Color(255, 255, 255));
        jButtonTrash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trash48x48.png"))); // NOI18N
        jButtonTrash.setToolTipText("Delete Abstraction");
        jButtonTrash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrashActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonTrash, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 80, 66, 60));

        jButtonConstantGeneration.setBackground(new java.awt.Color(255, 255, 255));
        jButtonConstantGeneration.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/constant48x48.png"))); // NOI18N
        jButtonConstantGeneration.setToolTipText("Insert Constant Generator Abstraction");
        jButtonConstantGeneration.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jButtonConstantGenerationMouseDragged(evt);
            }
        });
        jButtonConstantGeneration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonConstantGenerationMouseReleased(evt);
            }
        });
        jButtonConstantGeneration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConstantGenerationActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonConstantGeneration, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 220, 66, -1));

        jButtonDuplication.setBackground(new java.awt.Color(255, 255, 255));
        jButtonDuplication.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/duplication48x48.png"))); // NOI18N
        jButtonDuplication.setToolTipText("Insert Duplicator Abstraction");
        jButtonDuplication.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jButtonDuplicationMouseDragged(evt);
            }
        });
        jButtonDuplication.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonDuplicationMouseReleased(evt);
            }
        });
        jButtonDuplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDuplicationActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonDuplication, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 80, 66, -1));

        jButtonSink.setBackground(new java.awt.Color(255, 255, 255));
        jButtonSink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sink48x48.png"))); // NOI18N
        jButtonSink.setToolTipText("Insert Sink Abstraction");
        jButtonSink.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jButtonSinkMouseDragged(evt);
            }
        });
        jButtonSink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonSinkMouseReleased(evt);
            }
        });
        jButtonSink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSinkActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonSink, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 150, 70, -1));

        jButton2.setText("Imprimir relaciones");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 660, -1, -1));

        jButtonProduct.setBackground(new java.awt.Color(255, 255, 255));
        jButtonProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/product48x48.png"))); // NOI18N
        jButtonProduct.setToolTipText("Insert Producer Abstraction");
        jButtonProduct.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jButtonProductMouseDragged(evt);
            }
        });
        jButtonProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonProductMouseReleased(evt);
            }
        });
        jButtonProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProductActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 20, 60, -1));

        jScrollPane1.setViewportView(jTextPaneOutput);

        jPanel_Main.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 570, 970, 180));

        jPanelJXTaskContainer.setBackground(new java.awt.Color(255, 255, 255));

        jXTaskPaneHardwareAbstraction.setBackground(new java.awt.Color(255, 255, 255));
        jXTaskPaneHardwareAbstraction.setAutoscrolls(true);
        jXTaskPaneHardwareAbstraction.setTitle("Hardware Abstractions");

        jXTaskPaneActions.setTitle("Actions");

        javax.swing.GroupLayout jPanelJXTaskContainerLayout = new javax.swing.GroupLayout(jPanelJXTaskContainer);
        jPanelJXTaskContainer.setLayout(jPanelJXTaskContainerLayout);
        jPanelJXTaskContainerLayout.setHorizontalGroup(
            jPanelJXTaskContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelJXTaskContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelJXTaskContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jXTaskPaneActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXTaskPaneHardwareAbstraction, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanelJXTaskContainerLayout.setVerticalGroup(
            jPanelJXTaskContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelJXTaskContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTaskPaneHardwareAbstraction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jXTaskPaneActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel_Main.add(jPanelJXTaskContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jButtonView.setBackground(new java.awt.Color(255, 255, 255));
        jButtonView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/view48x48.png"))); // NOI18N
        jButtonView.setToolTipText("Insert Viewer Abstraction");
        jButtonView.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jButtonViewMouseDragged(evt);
            }
        });
        jButtonView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButtonViewMouseReleased(evt);
            }
        });
        jButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewActionPerformed(evt);
            }
        });
        jPanel_Main.add(jButtonView, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 290, 60, -1));

        printKPN.setBackground(new java.awt.Color(255, 255, 255));
        printKPN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/print.png"))); // NOI18N
        printKPN.setToolTipText("Print the KPN");
        printKPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printKPNActionPerformed(evt);
            }
        });
        jPanel_Main.add(printKPN, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, -1, -1));

        iterateKPN.setBackground(new java.awt.Color(255, 255, 255));
        iterateKPN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/start.png"))); // NOI18N
        iterateKPN.setToolTipText("Make a new iteration");
        iterateKPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterateKPNActionPerformed(evt);
            }
        });
        jPanel_Main.add(iterateKPN, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));

        createKPN.setBackground(new java.awt.Color(255, 255, 255));
        createKPN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/createNetwork.png"))); // NOI18N
        createKPN.setToolTipText("Initialize KPN");
        createKPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createKPNActionPerformed(evt);
            }
        });
        jPanel_Main.add(createKPN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, -1, -1));

        exportKPN.setBackground(new java.awt.Color(255, 255, 255));
        exportKPN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/export.png"))); // NOI18N
        exportKPN.setToolTipText("Export the KPN to XML");
        exportKPN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportKPNActionPerformed(evt);
            }
        });
        jPanel_Main.add(exportKPN, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, -1, -1));

        getContentPane().add(jPanel_Main, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButtonProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProductActionPerformed
        createProductRepresentation(0, 0);
    }//GEN-LAST:event_jButtonProductActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        hardwareGraph.printGraph();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonSinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSinkActionPerformed
        createSinkRepresentation(0, 0);
    }//GEN-LAST:event_jButtonSinkActionPerformed

    private void jButtonDuplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDuplicationActionPerformed
        createDuplicationRepresentation(0, 0);
    }//GEN-LAST:event_jButtonDuplicationActionPerformed

    private void jButtonConstantGenerationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConstantGenerationActionPerformed
        createConstantGenerationRepresentation(0, 0);
    }//GEN-LAST:event_jButtonConstantGenerationActionPerformed

    private void jButtonTrashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrashActionPerformed
        if (lastSelectedHardware != null) { //if there was selected any hardware representation before
            lastSelectedHardware.setBorder(BorderFactory.createLineBorder(Color.BLACK)); //establishing not selected border
            lastSelectedHardware = null; //cleaning the variable
        }
        this.jButtonRelations.setBorder(BorderFactory.createEmptyBorder());
        creatingHardwareRelationsFlag = false; //rebooting the variable of relations
        removingHardwareFlag = !removingHardwareFlag; //if remove flag is true comes false, if remove flag is false comes true
        if (removingHardwareFlag) {
            setCursor(Cursor.CROSSHAIR_CURSOR); //changing the cursor
            this.jButtonTrash.setBorder(BorderFactory.createLineBorder(selectedColor)); //making the border selected of the JLabel
        } else {
            setCursor(Cursor.getDefaultCursor()); //reseting the cursor
            this.jButtonTrash.setBorder(BorderFactory.createEmptyBorder()); //making the border not selected of the JLabel
        }
    }//GEN-LAST:event_jButtonTrashActionPerformed

    private void jButtonRelationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRelationsActionPerformed
        if (lastSelectedHardware != null) { //if there was selected any hardware representation before
            lastSelectedHardware.setBorder(BorderFactory.createLineBorder(Color.BLACK)); //establishing not selected border
            lastSelectedHardware = null; //cleaning the variable
        }
        this.jButtonTrash.setBorder(BorderFactory.createEmptyBorder());
        removingHardwareFlag = false; //setting remove flag as false
        creatingHardwareRelationsFlag = !creatingHardwareRelationsFlag; //if relation flag is true comes false, if relation flag is false comes true
        if (creatingHardwareRelationsFlag) {
            setCursor(Cursor.HAND_CURSOR); //changing the cursor
            this.jButtonRelations.setBorder(BorderFactory.createLineBorder(selectedColor));//making the border selected of the JLabel
        } else {
            setCursor(Cursor.getDefaultCursor()); //resetig the cursor
            this.jButtonRelations.setBorder(BorderFactory.createEmptyBorder()); //making the border not selected of the JLabel
        }
    }//GEN-LAST:event_jButtonRelationsActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        createAddRepresentation(0, 0);
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonProductMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonProductMouseDragged
        this.jButtonProductDragable.setVisible(true);
        this.jButtonProductDragable.setLocation(evt.getX() + 30, getYPositionOffset(evt.getY(), 1));
    }//GEN-LAST:event_jButtonProductMouseDragged

    private int getYPositionOffset(int y, int offset) {
        return y + (155 + (60 * offset));
    }

    private void jButtonProductMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonProductMouseReleased
        try {
            createProductRepresentation(this.jPanelBoard.getMousePosition().x, this.jPanelBoard.getMousePosition().y);
        } catch (Exception e) {
        } finally {
            this.jButtonProductDragable.setVisible(false);
        }
    }//GEN-LAST:event_jButtonProductMouseReleased

    private void jButtonAddMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseReleased
        try {
            createAddRepresentation(this.jPanelBoard.getMousePosition().x, this.jPanelBoard.getMousePosition().y);
        } catch (Exception e) {
        } finally {
            this.jButtonAddDragable.setVisible(false);
        }
    }//GEN-LAST:event_jButtonAddMouseReleased

    private void jButtonAddMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseDragged
        this.jButtonAddDragable.setVisible(true);
        this.jButtonAddDragable.setLocation(evt.getX() + 30, getYPositionOffset(evt.getY(), 0));
    }//GEN-LAST:event_jButtonAddMouseDragged

    private void jButtonConstantGenerationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonConstantGenerationMouseReleased

        try {
            createConstantGenerationRepresentation(this.jPanelBoard.getMousePosition().x, this.jPanelBoard.getMousePosition().y);
        } catch (Exception e) {
        } finally {
            this.jButtonConstantGenerationDragable.setVisible(false);
        }
    }//GEN-LAST:event_jButtonConstantGenerationMouseReleased

    private void jButtonConstantGenerationMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonConstantGenerationMouseDragged
        this.jButtonConstantGenerationDragable.setVisible(true);
        this.jButtonConstantGenerationDragable.setLocation(evt.getX() + 30, getYPositionOffset(evt.getY(), 2));

    }//GEN-LAST:event_jButtonConstantGenerationMouseDragged

    private void jButtonDuplicationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDuplicationMouseReleased
        try {
            createDuplicationRepresentation(this.jPanelBoard.getMousePosition().x, this.jPanelBoard.getMousePosition().y);
        } catch (Exception e) {
        } finally {
            this.jButtonDuplicationDragable.setVisible(false);
        }
    }//GEN-LAST:event_jButtonDuplicationMouseReleased

    private void jButtonDuplicationMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDuplicationMouseDragged
        this.jButtonDuplicationDragable.setVisible(true);
        this.jButtonDuplicationDragable.setLocation(evt.getX() + 30, getYPositionOffset(evt.getY(), 3));

    }//GEN-LAST:event_jButtonDuplicationMouseDragged

    private void jButtonSinkMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSinkMouseDragged
        this.jButtonSinkDragable.setVisible(true);
        this.jButtonSinkDragable.setLocation(evt.getX() + 30, getYPositionOffset(evt.getY(), 4));
    }//GEN-LAST:event_jButtonSinkMouseDragged

    private void jButtonSinkMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSinkMouseReleased
        try {
            createSinkRepresentation(this.jPanelBoard.getMousePosition().x, this.jPanelBoard.getMousePosition().y);
        } catch (Exception e) {
        } finally {
            this.jButtonSinkDragable.setVisible(false);
        }
    }//GEN-LAST:event_jButtonSinkMouseReleased

    private void jButtonViewMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonViewMouseDragged
        this.jButtonViewDragable.setVisible(true);
        this.jButtonViewDragable.setLocation(evt.getX() + 30, getYPositionOffset(evt.getY(), 7) - 10);
    }//GEN-LAST:event_jButtonViewMouseDragged

    private void jButtonViewMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonViewMouseReleased
        try {
            createViewRepresentation(this.jPanelBoard.getMousePosition().x, this.jPanelBoard.getMousePosition().y);
        } catch (Exception e) {
        } finally {
            this.jButtonViewDragable.setVisible(false);
        }
    }//GEN-LAST:event_jButtonViewMouseReleased

    private void jButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewActionPerformed
        createViewRepresentation(0, 0);
    }//GEN-LAST:event_jButtonViewActionPerformed

    private void jTextFieldInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInput1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInput1ActionPerformed

    private void jTextFieldOutput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOutput1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutput1ActionPerformed


    private void printKPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printKPNActionPerformed
        if (net != null) {
            net.printKPNNetwork();
            this.jTextPaneOutput.setText("Output<br>");
            this.jTextPaneOutput.setText(getTextPane() + net.getKPNNetworkOutput());
            this.jTextPaneOutput.setText(getTextPane() + "-------------------------------------------<br>");
        } else {
            JOptionPane.showMessageDialog(this,
                    "You must initialized the KPN first.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }

    }//GEN-LAST:event_printKPNActionPerformed

    private String getTextPane() {
        return jTextPaneOutput.getText().replaceAll("</*html>|</*head>|</*body>|\n|\r", "").trim();
    }

    private void iterateKPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterateKPNActionPerformed
        try {
            //Verifing that the network is initialized
            if (net != null) {
                //Making an iteration
                net.resumeKPNNetwork();
                //Giving time to the threads
                sleep(200);
                //Updating output
                this.jTextPaneOutput.setText(getTextPane() + net.getKPNNetworkOutput());
                this.jTextPaneOutput.setText(getTextPane() + "-------------------------------------------<br>");
            } else {
                JOptionPane.showMessageDialog(this,
                        "You must initialized the KPN first.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (InterruptedException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_iterateKPNActionPerformed


    private void createKPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createKPNActionPerformed
        if (net != null) {
            net.freeKPNNetwork(); //just in case that threads were created before
        }

        net = new KPNNetwork(hardwareGraph);
        net.pauseKPNNetwork();
        net.startKPNNetwork();

        net.printKPNNetwork();

        this.jTextPaneOutput.setText("Output<br>KPN Created Successfully<br>");
        this.jTextPaneOutput.setText(getTextPane() + "-------------------------------------------<br>");
        this.jTextPaneOutput.setText(getTextPane() + net.getKPNNetworkOutput());
        this.jTextPaneOutput.setText(getTextPane() + "-------------------------------------------<br>");


    }//GEN-LAST:event_createKPNActionPerformed

    private void jTextFieldOutput2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOutput2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOutput2ActionPerformed

    private void jTextFieldInput2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInput2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInput2ActionPerformed

    private void jButtonApplyDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApplyDelayActionPerformed
        /*if()
        {
            
        }
        else
        {
            
        }*/

        selectedQueueJDialog.getInputQueue().clear(); //just in case that the variable was write before
        String text = this.jTextFieldFifo.getText().trim().replace(" ", ""); //getting the numbers of the queue
        String[] parts = text.split(","); //split in an array       

        if (selectedQueueJDialog.getInputs().isEmpty()) {
            selectedQueueJDialog.setConstantGeneration(this.jCheckBoxFifo.isSelected()); //verifies if constant generation option was selected
        } else if (this.jCheckBoxFifo.isSelected()) {
            JOptionPane.showMessageDialog(this,
                    "The constant generation option can only be actived if the constant generation hardware doesn't have any hardware input.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }

        for (String part : parts) {
            try {
                selectedQueueJDialog.getInputQueue().add(Float.parseFloat(part)); //adding the numbers to the queue
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        int delay = (int) this.jSpinnerDelay.getValue();
        selectedQueueJDialog.setDelayIterations(delay);

        JOptionPane.showMessageDialog(this,
                "Sucessfully operation. Is constant generation: "
                + selectedQueueJDialog.isConstantGeneration()
                + ", Current elements: "
                + selectedQueueJDialog.getInputQueue()
                + ", Delay iterations: " + selectedQueueJDialog.getDelayIterations(),
                "Information",
                JOptionPane.INFORMATION_MESSAGE
        );
        this.jDialogDelay.setVisible(false);


    }//GEN-LAST:event_jButtonApplyDelayActionPerformed

    private void exportKPNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportKPNActionPerformed
        //Verifing that the KPN is intialized
        if (net != null) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setBackground(Color.white);
            // Demonstrate "Save" dialog:
            int rVal = fileChooser.showSaveDialog(this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                String path = fileChooser.getCurrentDirectory().toString() + "/" + fileChooser.getSelectedFile().getName() + ".xml";
                //Creating the export file
                net.exportKPNToXML(path);
                
                CodeGenerator xmlCompiler;
                try {
                    xmlCompiler = new CodeGenerator(path);
                    xmlCompiler.createKPN();
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                

                JOptionPane.showMessageDialog(this,
                        "File saved",                        
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE
                );

            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "You must initialized the KPN first.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_exportKPNActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Memory free");
        if (net != null) {
            net.freeKPNNetwork();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void jCheckBoxFifoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxFifoStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxFifoStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createKPN;
    private javax.swing.JButton exportKPN;
    private javax.swing.JButton iterateKPN;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddDragable;
    private javax.swing.JButton jButtonApplyDelay;
    private javax.swing.JButton jButtonConstantGeneration;
    private javax.swing.JButton jButtonConstantGenerationDragable;
    private javax.swing.JButton jButtonDuplication;
    private javax.swing.JButton jButtonDuplicationDragable;
    private javax.swing.JButton jButtonProduct;
    private javax.swing.JButton jButtonProductDragable;
    private javax.swing.JButton jButtonRelations;
    private javax.swing.JButton jButtonSink;
    private javax.swing.JButton jButtonSinkDragable;
    private javax.swing.JButton jButtonTrash;
    private javax.swing.JButton jButtonView;
    private javax.swing.JButton jButtonViewDragable;
    private javax.swing.JCheckBox jCheckBoxFifo;
    private javax.swing.JDialog jDialogDelay;
    private javax.swing.JDialog jDialogView;
    private javax.swing.JLabel jLabelDelay;
    private javax.swing.JLabel jLabelFIFO;
    private javax.swing.JLabel jLabelFIFO6;
    private javax.swing.JLabel jLabelInput1;
    private javax.swing.JLabel jLabelInput2;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JLabel jLabelOutput1;
    private javax.swing.JLabel jLabelOutput2;
    private javax.swing.JPanel jPanelBoard;
    private javax.swing.JPanel jPanelDialog1;
    private javax.swing.JPanel jPanelDialog2;
    private javax.swing.JPanel jPanelJXTaskContainer;
    private javax.swing.JPanel jPanel_Main;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerDelay;
    private javax.swing.JTextField jTextFieldFifo;
    private javax.swing.JTextField jTextFieldInput1;
    private javax.swing.JTextField jTextFieldInput2;
    private javax.swing.JTextField jTextFieldOutput1;
    private javax.swing.JTextField jTextFieldOutput2;
    private javax.swing.JTextPane jTextPaneOutput;
    private org.jdesktop.swingx.JXTaskPane jXTaskPaneActions;
    private org.jdesktop.swingx.JXTaskPane jXTaskPaneHardwareAbstraction;
    private javax.swing.JButton printKPN;
    // End of variables declaration//GEN-END:variables

    private void initValues() {
        creatingHardwareRelationsFlag = false;
        GUIActions = new GUIActions();
        GUIActions.start();
        selectedColor = Color.GREEN;
        hardwareGraph = new HardwareGraph();
        userThreadDebuging = true;

        JLabelArrayView = new ArrayList<>();
        JTextFieldArrayView = new ArrayList<>();

        JLabelArrayView.add(jLabelInput1);
        JLabelArrayView.add(jLabelInput2);
        JLabelArrayView.add(jLabelOutput1);
        JLabelArrayView.add(jLabelOutput2);

        JTextFieldArrayView.add(jTextFieldInput1);
        JTextFieldArrayView.add(jTextFieldInput2);
        JTextFieldArrayView.add(jTextFieldOutput1);
        JTextFieldArrayView.add(jTextFieldOutput2);

    }

    private void modifyGUI() {
        this.jXTaskPaneHardwareAbstraction.add(this.jButtonAdd);
        this.jXTaskPaneHardwareAbstraction.add(this.jButtonProduct);
        this.jXTaskPaneHardwareAbstraction.add(this.jButtonConstantGeneration);
        this.jXTaskPaneHardwareAbstraction.add(this.jButtonDuplication);
        this.jXTaskPaneHardwareAbstraction.add(this.jButtonSink);

        this.jXTaskPaneActions.add(this.jButtonRelations);
        this.jXTaskPaneActions.add(this.jButtonView);
        this.jXTaskPaneActions.add(this.jButtonTrash);

        this.jButtonRelations.setBorder(BorderFactory.createEmptyBorder());
        this.jButtonTrash.setBorder(BorderFactory.createEmptyBorder());

        jTextPaneOutput.setContentType("text/html");
        jTextPaneOutput.setEditable(false);
        this.jTextPaneOutput.setText("<b>Output</b><br>");

        this.jDialogDelay.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/icon.png")));
        this.jDialogView.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/icon.png")));
    }

    private int getConnectorsSize() {
        int result = 0;

        for (int i = 0; i < hardwareGraph.size(); i++) {

            result += hardwareGraph.get(i).getOutputs().size();

        }
        return result;
    }

    private void paintHardware() {
        this.jPanelBoard.removeAll();
        this.jPanelBoard.validate();

        JLabelConnector[] connectors = new JLabelConnector[getConnectorsSize()];

        int index = 0;

        for (int i = 0; i < hardwareGraph.size(); i++) {

            int ouputsSize = hardwareGraph.get(i).getOutputs().size();
            if (ouputsSize > 0) {

                for (int j = 0; j < ouputsSize; j++) {
                    if (hardwareGraph.verifySameOutput(hardwareGraph.get(i), hardwareGraph.get(i).getOutputs().get(j))) {
                        connectors[index] = new JLabelConnector(hardwareGraph.get(i).getLabel(), hardwareGraph.get(i).getOutputs().get(j), Color.orange);

                    } else {
                        connectors[index] = new JLabelConnector(hardwareGraph.get(i).getLabel(), hardwareGraph.get(i).getOutputs().get(j), Color.BLUE);

                    }
                    index++;
                }
            }
        }

        ConnectorContainer conectorContainer = new ConnectorContainer(connectors);

        conectorContainer.setLayout(null);
        conectorContainer.setBackground(Color.white);

        for (int i = 0; i < hardwareGraph.size(); i++) {

            conectorContainer.add(hardwareGraph.get(i).getLabel());

        }

        conectorContainer.setBorder(new EtchedBorder(EtchedBorder.LOWERED));

        this.jPanelBoard.add(conectorContainer,
                new GridBagConstraints(0, 1, 1, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, new Insets(5, 5, 5, 5), 0, 0));

        this.jPanelBoard.validate();
        this.jPanelBoard.repaint();

        this.jPanel_Main.validate();
        this.jPanel_Main.repaint();
    }

    private void createHardwareBlock(String imagePath, int hardwareType, String toolTip, String name, int posX, int posY) {
        JLabel newLabel;

        switch (hardwareType) {
            case 3:
                newLabel = new DragLabel(imagePath, toolTip, jDialogDelay, name, posX, posY, jTextFieldFifo, jSpinnerDelay, this, jCheckBoxFifo);
                break;
            case 6:
                newLabel = new DragLabel(imagePath, toolTip, jDialogView, name, posX, posY, null, null, this, null);
                break;
            default:
                newLabel = new DragLabel(imagePath, toolTip, null, name, posX, posY, null, null, this, null);
                break;
        }

        HardwareModel model = new HardwareModel();
        model.setPosX(posX);
        model.setPosY(posY);
        model.setLabel(newLabel);
        model.setHardwareType(hardwareType);
        hardwareGraph.add(model);
        paintHardware();
    }

    private void createAddRepresentation(int posX, int posY) {
        String imagePath = "/Images/add48x48.png";
        int hardwareType = 1;
        String toolTip = "Hardware: adder <br>ID: ";
        String name = "adder";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);

    }

    private void createProductRepresentation(int posX, int posY) {
        String imagePath = "/Images/product48x48.png";
        int hardwareType = 2;
        String toolTip = "Hardware: producer <br>ID: ";
        String name = "product";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);

    }

    private void createConstantGenerationRepresentation(int posX, int posY) {
        String imagePath = "/Images/constant48x48.png";
        int hardwareType = 3;
        String toolTip = "Hardware: constant generator <br>ID: ";
        String name = "constantGeneration";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);

    }

    private void createDuplicationRepresentation(int posX, int posY) {
        String imagePath = "/Images/duplication48x48.png";
        int hardwareType = 0;
        String toolTip = "Hardware: duplicate <br>ID: ";
        String name = "duplication";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);

    }

    /*private void createQueueRepresentation(int posX, int posY) {
        String imagePath = "/Images/queue48x48.png";
        int hardwareType = 5;
        String toolTip = "Hardware: queue <br>ID: ";
        String name = "queue";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);
    }*/
    private void createViewRepresentation(int posX, int posY) {
        String imagePath = "/Images/view48x48.png";
        int hardwareType = 6;
        String toolTip = "Hardware: viewer <br>ID: ";
        String name = "view";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);
    }

    private void createSinkRepresentation(int posX, int posY) {
        String imagePath = "/Images/sink48x48.png";
        int hardwareType = 4;
        String toolTip = "Hardware: sink <br>ID: ";
        String name = "sink";
        createHardwareBlock(imagePath, hardwareType, toolTip, name, posX, posY);
    }

    private class GUIActions extends Thread {

        @Override
        public void run() {
            while (true) {
                if (GUI.repaintWorkSpaceFlag) {
                    paintHardware();
                    GUI.repaintWorkSpaceFlag = false;

                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
